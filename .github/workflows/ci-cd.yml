name: CI/CD Pipeline

on:
  push:
    branches:
      - main 
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      mongodb:
        image: mongo
        ports:
          - 27017:27017
        volumes:
          - mongo-data:/data/db
        env:
          MONGO_INITDB_DATABASE: editor
        options: >-
          --health-cmd "echo 'MongoDB is running'"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 5

    steps:
      - name: Cleanup disk space
        run: |
          sudo apt-get clean
          sudo rm -rf /var/lib/apt/lists/*
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc

      - name: Checkout code
        uses: actions/checkout@v2
        
      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          java-version: '17'  
          distribution: 'temurin'

      - name: Verify Java version
        run: java -version

      - name: Build with Maven
        run: mvn clean package
        working-directory: ./CollabCode
      - name: Check if JAR file was created
        run: ls -la ./CollabCode/target

      - name: List files in CollabCode/Dockerfiles/java
        run: ls -la ./CollabCode/Dockerfiles/java

      - name: List files in CollabCode/Dockerfiles/python
        run: ls -la ./CollabCode/Dockerfiles/python

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }} 
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
      - name: Cleanup 
        run: |
          sudo apt-get clean
          sudo rm -rf /var/lib/apt/lists/*
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo docker system prune -a --volumes -f # Add this line for Docker cleanup

      - name: Build and push Java image
        uses: docker/build-push-action@v3
        with:
          context: ./CollabCode/Dockerfiles/java
          file: ./CollabCode/Dockerfiles/java/Dockerfile
          push: true
          tags: lana0193582/java-container:latest

      - name: Build and push Python image
        uses: docker/build-push-action@v3
        with:
          context: ./CollabCode/Dockerfiles/python
          file: ./CollabCode/Dockerfiles/python/Dockerfile
          push: true
          tags: lana0193582/python-container:latest

      - name: Build and push Spring app image
        uses: docker/build-push-action@v3
        with:
          context: ./CollabCode
          file: ./CollabCode/Dockerfile
          push: true
          tags: lana0193582/spring-app:latest

      - name: Build and push React app image
        uses: docker/build-push-action@v3
        with:
          context: ./code-editor-frontend
          push: true
          tags: lana0193582/react-app:latest
          build-args: 
            NPM_CONFIG_PRODUCTION=false

      - name: Decode SSH Private Key
        run: echo "${{ secrets.SSH_PRIVATE_KEY }}" > private_key.pem

      - name: Set permissions for private key
        run: chmod 600 private_key.pem

      - name: Deploy to AWS EC2
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > private_key.pem
          ssh -o StrictHostKeyChecking=no -i private_key.pem ubuntu@54.163.68.196 << 'ENDSSH'
            # Create the project directory if it does not exist
            sudo usermod -aG docker ubuntu
            sleep 5
            mkdir -p /home/ubuntu/c

            # Navigate to the project directory
            cd /home/ubuntu/c || exit

            # Clone the repository if it doesn't exist
            if [ ! -d ".git" ]; then
              git clone https://github.com/alnimreen/c.git .
            else
              git pull
            fi

            # Pull the latest images and recreate the containers
            docker-compose pull
            docker-compose up -d
          ENDSSH
